/*
 * Copyright 2011 the original author or authors. (see https://github.com/gradle/gradle which also uses Apache 2.0)
 *
 * Modifications were made to that code for compatibility with Optimus Build Tool and its report file layout.
 * For those changes only, where additions and modifications are indicated with 'ms' in comments:
 *
 * Morgan Stanley makes this available to you under the Apache License, Version 2.0 (the "License").
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * See the NOTICE file distributed with this work for additional information regarding copyright ownership.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradle.reporting;

import java.io.IOException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Date;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.apache.commons.io.IOUtils;
import org.gradle.internal.html.SimpleHtmlWriter;

public abstract class TabbedPageRenderer<T>
    extends ReportRenderer<T, HtmlPageBuilder<SimpleHtmlWriter>> {
  private static final URL BASE_STYLE_URL =
      TabbedPageRenderer.class.getResource("/org/gradle/reporting/base-style.css");
  private static final URL REPORT_JS_URL =
      TabbedPageRenderer.class.getResource("/org/gradle/reporting/report.js");

  public static String OBT_VERSION = "local"; // +ms to the bottom of the file

  private T model;

  protected T getModel() {
    return model;
  }

  protected abstract String getTitle();

  protected abstract ReportRenderer<T, SimpleHtmlWriter> getHeaderRenderer();

  protected abstract ReportRenderer<T, SimpleHtmlWriter> getContentRenderer();

  protected String getPageTitle() {
    return getTitle();
  }

  protected abstract URL getStyleUrl();

  @Override
  public void render(final T model, HtmlPageBuilder<SimpleHtmlWriter> builder) throws IOException {
    this.model = model;

    String baseStyleLink = builder.requireResource(BASE_STYLE_URL);
    String reportJsLink = builder.requireResource(REPORT_JS_URL);
    String styleLink = builder.requireResource(getStyleUrl());

    SimpleHtmlWriter htmlWriter = builder.getOutput();

    htmlWriter
        .startElement("head")
        .startElement("meta")
        .attribute("http-equiv", "Content-Type")
        .attribute("content", "text/html; charset=utf-8")
        .endElement()
        .startElement("meta")
        .attribute("http-equiv", "x-ua-compatible")
        .attribute("content", "IE=edge")
        .endElement()
        .startElement("title")
        .characters(getPageTitle())
        .endElement()
        .startElement("link")
        .attribute("href", baseStyleLink)
        .attribute("rel", "stylesheet")
        .attribute("type", "text/css")
        .endElement()
        .startElement("link")
        .attribute("href", styleLink)
        .attribute("rel", "stylesheet")
        .attribute("type", "text/css")
        .endElement()
        .startElement("script")
        .attribute("src", reportJsLink)
        .attribute("type", "text/javascript")
        .characters("")
        .endElement() // html does not like <a name="..."/>
        .endElement();

    htmlWriter
        .startElement("body")
        .startElement("div")
        .attribute("id", "content")
        .startElement("h1")
        .characters(getTitle())
        .endElement();

    getHeaderRenderer().render(model, htmlWriter);
    getContentRenderer().render(model, htmlWriter);

    htmlWriter
        .startElement("div")
        .attribute("id", "footer")
        .startElement("p")
        .startElement("div")
        .startElement("label")
        .attribute("class", "hidden")
        .attribute("id", "label-for-line-wrapping-toggle")
        .attribute("for", "line-wrapping-toggle")
        .characters("Wrap lines")
        .startElement("input")
        .attribute("id", "line-wrapping-toggle")
        .attribute("type", "checkbox")
        .attribute("autocomplete", "off")
        .endElement()
        .endElement()
        .endElement()
        .characters("Generated by ")
        .characters("Optimus Build Tool ")
        .characters(OBT_VERSION)
        .characters(String.format(" at %s", builder.formatDate(new Date())))
        .endElement()
        .endElement()
        .endElement()
        .endElement();
  }
}
